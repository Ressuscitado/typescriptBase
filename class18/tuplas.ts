//Tupla simples, ela suporta diferentes tipos de dados, mas quando definidos dessa forma abaixo, sempre tem tamanho e tipo definidos e n√£o podem mudar, nem no posicionamento nem no tamanho, apenas no conteudo. Se usarmos o push, ela iria aumentar de tamanho, mas n√£o seria uma boa pr√°tica, pq o c√≥digo poderia se perder j√° que o tamanho foi definido na cria√ß√£o, nesse caso seria melhor optar por um array com multi types.
let pessoa: [string, string, number];
// daria erro pois precisa come√ßar com string--> pessoa = [36, 'Software Engineer', 26];
pessoa = ['Igor Artus', 'Software Engineer', 26];
console.log(pessoa);


//acessando dados especificos da tupla
pessoa = ['Igor Artus', 'Software Engineer', 56];
console.log(pessoa[0]);
console.log(pessoa[1]);
console.log(pessoa[2]);

//Tuplas com Labels,  √© conhecida como r√≥tulos opcionais. Esses r√≥tulos n√£o alteram o comportamento da tupla, mas servem como uma documenta√ß√£o adicional no c√≥digo, parecem OBJETOS{} mas Os r√≥tulos fornecidos (nome, cargo, idade) s√£o apenas para documenta√ß√£o e maior clareza. N√£o podem ser usados para acessar os elementos visto que s√£o tuplas[].
let pessoa2: [nome: string, cargo: string, idade: number] = ['Igor Artus', 'Software Engineer', 26];
console.log(pessoa2);

//Tuplas com spread operator..., se tivermos 50 itens de frutas n√£o teriamos que escrever STRING 50 VEZES, usando dessa forma com o spread e o tipo de dado ...string[], ele entende que os itens ser√£o todos frutas e aceita uma tamanho vari√°vel ao contr√°rio do primeiro exemplo que tem tamanho fixo. n√£o haver√° problema com o push, pois a tupla foi definida para permitir um n√∫mero indefinido de strings ap√≥s o primeiro elemento, gra√ßas ao uso do operador ...string[]
let listafrutas: [string, ...string[]] = ['üçå', 'üçé', 'üçç',  'üçâ'];
//Quando voc√™ usa apenas console.log(listafrutas), o console.log imprime o array completo ou a tupla inteira como uma √∫nica unidade.
console.log(listafrutas);
listafrutas.push('üçå', 'üçé', 'üçç',  'üçâ', 'üçå', 'üçé', 'üçç',  'üçâ');
console.log(listafrutas);
//Se voc√™ usar o operador de espalhamento (...) no console.log, ele ir√° desestruturar a tupla ou array em elementos individuais:
console.log(...listafrutas);

//Listas heterog√™neas de tupla, podemos reaproveitar listas ja feitas
let listaTupla2: [string, boolean, ...string[]] = ['frutas', true, ...listafrutas];
console.log(listaTupla2);

//Uso de fun√ß√£o com tuplas
//function listarPessoas(nome: string, idade: number) isso aqui √© diferente do abaixo, isso √© s√≥ os types de uma fun√ß√£o, agora abaixo √© uma fun√ß√£o que os parametros esperam arrays apenas, e podem ser mais de um para cada.
function listarPessoas(nome: string[], idade: number[]) {
    return [nome, idade];
}
let resultado = listarPessoas(['Igor', 'Divani'], [26, 57]);
console.log(resultado);

//Uso de fun√ß√£o com tuplas, aqui esperam apenas 1 de cada.
function listarPessoas1(nome: [string], idade: [number]) {
    return [nome, idade];
}

let resultado1 = listarPessoas1(['Igor'], [26]);
console.log(resultado1);

//Usando type pr√≥prio com operador ou |, para termos duas op√ß√µes distintas na hora de criar uma tupla
type Nome = 
    | [primeiroNome: string, sobrenome: string]
    | [primeiroNome: string, nomeMeio: string, sobrenome: string];

//O Rest operator ex (...nome: Nome) ou sem criar type pr√≥prio (..nome: string[]) se caracteriza pelo uso do spread operator (...) no par√¢metro, permite que voc√™ passe os argumentos separadamente, e o TypeScript vai automaticamente agrup√°-los em uma tupla que corresponda a uma das varia√ß√µes definidas no tipo Nome.
function criarPessoa(...nome: Nome) {
    return [nome];
}
console.log(criarPessoa('Igor', 'artus', 'artus'));
console.log(criarPessoa('Igor', 'artus'));

// REST PARAMETER
/*
O Rest Parameter (ou Par√¢metro Rest) em JavaScript e TypeScript √© uma sintaxe que permite que uma fun√ß√£o receba um n√∫mero indefinido de argumentos como um array. Com ele, voc√™ pode passar m√∫ltiplos argumentos para uma fun√ß√£o sem precisar especificar a quantidade exata de par√¢metros na assinatura da fun√ß√£o.

O rest parameter √© representado pela sintaxe ... (tr√™s pontos) e √© sempre o √∫ltimo par√¢metro de uma fun√ß√£o. Ele √© chamado "rest" porque captura o "restante" dos argumentos ap√≥s os par√¢metros nomeados (se houver).
 */

//Eu posso passar mais de 1 valor mesmo tendo s√≥ 1 parametro dentro da fun√ß√£o
function exemploRest(...parametros: string[]) {
    console.log(parametros);
}

exemploRest('A', 'B', 'C'); // ["A", "B", "C"]
exemploRest('Igor', 'Artus'); // ["Igor", "Artus"]

//Outro exemplo de REST parameter com spread operator
function listarNomes(primeiro: string, ...restantes: string[]) {
    console.log(`Primeiro nome: ${primeiro}`);
    console.log(`Restantes: ${restantes.join(', ')}`);
}

listarNomes('Igor', 'Artus', 'Silva', 'Joaquim'); 
// Primeiro nome: Igor
// Restantes: Artus, Silva, Joaquim




//TUPLAS VS ARRAYS
/*Tuplas t√™m tamanho fixo e tipos espec√≠ficos por posi√ß√£o, uma estrutura rigida. √öteis para dados heterog√™neos e ordenados, como [string, number]. Onde tenho controle r√≠gido da entrada de dados.
Arrays t√™m tamanho vari√°vel √∫teis para lista din√¢micas.

N√£o √© aconselh√°vel aumentar o tamanho de uma tupla ap√≥s ela ser criada, pois a principal caracter√≠stica da tupla √© ter um tamanho e tipos fixos para cada posi√ß√£o. Pra tupla a exce√ß√£o para aumentar seu tamanho seria um spread operator por exemplo ...string[] para uma lista incremental com elementos do mesmo tipo. O push aumenta mas pode dar erros futuros e deixar o c√≥digo perdido, visto que a tupla n√£o esperava mais dados fora os definidos originalmente.

Se voc√™ precisa de uma cole√ß√£o que pode crescer ou mudar de tamanho, usar um array √© a escolha mais adequada desde o in√≠cio.*/

/*
ARRAY ----> let pessoa: string[] = ['oi', 'oi'];
TUPLA ----> let pessoa1: [string] = ['oi']; 
*/

/*
SPREAD OPERATOR

Quando o ... (spread operator) √© usado fora da lista de par√¢metros de uma fun√ß√£o, ele desempenha o papel de espalhar os itens de um array ou de um objeto. O spread operator "desempacota" os elementos de arrays ou objetos em um contexto onde s√£o esperados v√°rios valores!

Spread em Arrays: Desempacota os elementos de um array para outro array ou contexto.
Spread em Objetos: Copia ou combina propriedades de objetos.
console.log() com Spread: Passa os elementos de um array ou tupla como argumentos individuais para o console.log().
Spread DENTRO de Fun√ß√µes(n√£o no parametro): Passa elementos de arrays como argumentos individuais.
Rest Parameter(spread dentro do parametro da fun√ß√£o): Captura m√∫ltiplos argumentos em uma fun√ß√£o e os coloca em um array, mesmo que tenha s√≥ um parametro a fun√ß√£o, caso tenha mais de um parametro o REST deve ser o ultimo de todos.  ex function nome(...nome: string[]).

 */